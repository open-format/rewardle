###CERTBOT_CONFIG_START###

upstream docker-backend {
    server app:8080;
}

upstream docker-frontend {
    server app:3000;
}

###CERTBOT_CONFIG_END###

server {
    listen 80;
    server_name ${SERVER_NAME};
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

###CERTBOT_CONFIG_START###

server {
    listen [::]:443 ssl ipv6only=on;
    listen 443 ssl;

    server_name ${SERVER_NAME};
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/${SERVER_NAME}-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${SERVER_NAME}-0001/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    auth_basic "Restricted Content";
    auth_basic_user_file /srv/htpasswd;

    location / {
        proxy_pass http://docker-frontend/;
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    }

    location /api/v1/ {
        auth_basic off;
        proxy_pass http://docker-backend/api/v1/
        proxy_set_header    Host                $http_host;
        proxy_set_header    X-Real-IP           $remote_addr;
        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    }

    location = /_next/webpack-hmr {
        auth_basic off;
        proxy_pass http://docker-frontend/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /socket.io/ {
        auth_basic off;
        proxy_pass http://docker-backend/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_buffering off; # Disable buffering when the nginx proxy gets very slow (source stall/buffering).

        # CORS headers
        # CORS header for non preflight requests is added in the node app
        #add_header 'Access-Control-Allow-Origin' '${ALLOWED_ORIGINS}';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
        if ($request_method = 'OPTIONS') {
            # Preflight request. Reply successfully:
            add_header 'Access-Control-Allow-Origin' '${ALLOWED_ORIGINS}';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }

}

###CERTBOT_CONFIG_END###